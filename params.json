{
  "name": "Promiserunner",
  "tagline": "A simple promisefying factory which creates promises out of functions when you need asynchronous run of the same functions.",
  "body": "# Promise Runner:\r\n##### A simple promisifying utility to make functions run in an asynchronous fashion.\r\nsimply use the run() method start the promise chain and put the followed functions in order inside a .then() or add all the functions to a queue and when ever you want the queue to be executed run the .runQueue() method.\r\n\r\n#### **Usage:** \r\nFirst import or require in the javascript source you need to use in and create an instence.\r\n ```js\r\n   var PromiseRunner = require('./PromiseRunner');\r\n   var chain=new PrimiseRunner();\r\n ``` \r\n There are two ways to \r\n By using the _add_ method queue up the functions to be run asynchronously followed by the parameters the function accepts in an array in the correct order. \r\n```js\r\nchain.add(f1,[1]).add(f2,[2,3]).add(f3,[5,3,5,9]).add(f3).add(f2,[100,200]).add(f5);\r\n```\r\n**Keep in mind to add chain.resolve() or chain.reject() to the place you want the function to continue to the next one in line.**\r\nThe body of function f1 would look something like this:\r\n```js\r\nvar f1=function(input){\r\n    setTimeout(function(){\r\n     \tconsole.log(1,input);\r\n \t    chain.resolve(); //this is where we go to the next function\r\n    },100);\r\n};\r\n\r\n```\r\nwhen ever there is need for the queue to run use the runQueue() method to start the asynchronouse run process.\r\n```js\r\nchain.runQueue();\r\n```\r\nAnother method to run wrap the functions in a promise would be to use the .run() method directly:\r\n\r\n```js\r\np.run(f2)\r\n .then(p.run(function({\r\n\t\t f1('hello');}))\r\n .then(p.run(f2))\r\n .then(p.run(f1));\r\n```\r\n\r\n### Functions wrapped in a promise:\r\n - somewhere in the body of the function a resolve('someMessage') must be provided so that the chain doesn't break and the promise and resolves to the next function. You may also put a reject and if the function fails call .reject().\r\n```js\r\nvar i=1;\r\nvar f1=function one(resolve,i){ //resolve as the first parameter\r\n\tif(i==1){\r\n\t\tconsole.log('one',i);\r\n\t    chain.resolve('done'); //resolve here\r\n    }else\r\n    {\r\n\t    chain.reject('fail'); //rejects here\r\n    }\r\n};\r\n```\r\n\r\n### Version\r\n0.1.1\r\n\r\n### Todos\r\n - Make run method accept functions and run them in a continuous manner\r\n - Test\r\n - Add Code Comments\r\n \r\n### Links\r\n- [GitHub repository](https://github.com/pharzan/promiseRunner/): Linke to PromiseRunners GitHub Repository\r\n- [GitHub homepage](http://pharzan.github.io/promiseRunner/): Link to PromiseRunners GitHub Home\r\n- [Promises on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise): Link to the Promise Explanation page on MDN\r\n- [Can I Use](http://caniuse.com/#search=Promise): Which browsers support promises \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}